myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat|color*cut,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?sun
?fun
?rgb
p3<-colorRampPalette(c("blue","green"))
p3<-colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19col,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols<-brewer,pal(3,"BuGn")
cols<-brewer.pal(3,"BuGn")
showMe()
showMe(cols])
showMe(cols)
pal<-colorRampPalette(cols)
showMe(3)
showMe(pal(20))
image(volcano,pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv
)
myhigh
qplot(displ,hwy,data=mpg,color=drv,geom="boxplot")
qplot(drv,hwy,data=mpg,color=drv,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer
)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"))
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtile("Swirl Rules!")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(,size=4,alpha=1/2,aes(color=drv))
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(size=4,alpha=1/2,aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y=Hwy Mileage)
g+geom_point(size=4,alpha=1/2,aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(size=4,alpha=1/2,aes(color=drv))+geom_smooth(size=4,linetype=3,method="lm",se=FALSe)
g+geom_point(size=4,alpha=1/2,aes(color=drv))+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
warnings()
plot(myx, myy, type = "l", ylim = c(-3,3))
g<-ggplot(testdata,aes(x=myx,y=myy))
g<-ggplot(testdat,aes(x=myx,y=myy))
g+geom_line()
g+geom_line(ylim(-3,3))
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,bandwidth=18497/30)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds
)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,colors=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(method="lm")
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(method="lm")+facets(.~cut)
qplot(carat,price,data=diamonds,color=cut,facets(.~cut))+geom_smooth(method="lm")
qplot(carat,price,data=diamonds,color=cut,facets=.~cut)+geom_smooth(method="lm")
g<-ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat,seq(0,1,4),na.rm=TRUE)
cutpoints<-quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat,cutpoints)
g<-ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
a<-read.csv("Surgical_Cases_3.3.csv")
a<-as.data.frame(a)
a['SN...BM...Platelets'][is.na(a['SN...BM...Platelets'])]<-0
a['SN...BM...Cryoprecipitate'][is.na(a['SN...BM...Cryoprecipitate'])]<-0
a['SN...BM...Fresh.Frozen.Plasma'][is.na(a['SN...BM...Fresh.Frozen.Plasma'])]<-0
a['SN...BM...Red.Blood.Cells'][is.na(a['SN...BM...Red.Blood.Cells'])]<-0
summary(a)
length(a[1])
length(a)
length(a$SN...BM...Red.Blood.Cells)
summary(a)
a[!(is.na(a$ResultsBeforeSurgery), ]
a[!(is.na(a$ResultsBeforeSurgery)), ]
a<-a[!(is.na(a$ResultsBeforeSurgery)), ]
summary(a)
a<-a[!(is.na(a$ResultAfterSurgery)), ]
summary(a)
write.csv(a,file='abc.csv')
getwd()
a<-read.csv("Surgical_Cases_fm_3.3.csv")
a<-as.data.frame(a)
summary(a)
a<-a[!(is.na(a$ResultAfterSurgery)), ]
summary(a)
write.csv(a,file='abc.csv')
write.csv(a,file='abcd.csv')
summary(a$SN...BM...Pre.Op.Platelet.Count)
colnames(a)
a<-read.csv("Surgical_Cases_fm_3.3.csv")
a<-read.csv("Surgical_Cases_fm_3.3.csv")
a<-as.data.frame(a)
a<-a[!(is.na(a$ResultAfterSurgery)), ]
summary(a)
a<-read.csv("Surgical_Cases_fm_3.3.csv",na.strings=c("","NA"))
summary(a)
a<-read.csv("Surgical_Cases_fm_3.3.csv",na.strings=c("","NA"))
b<-read.csv("Surgical_Cases_fm_3.3.csv")
a<-as.data.frame(a)
b<-as.data.frame(b)
summary(b)
summary(a)
colnames(a)
a['SN...BM...Pre.Op.INR'][is.na(a['SN...BM...Pre.Op.INR'])]<-0
summary(a)
a['SN...BM...Pre.Op.Platelet.Count'][is.na(a['SN...BM...Pre.Op.Platelet.Count'])]<-0
summary(a)
a<-a[!(is.na(a$age)), ]
a<-a[!(is.na(a$ResultAfterSurgery)), ]
summary(a)
write.csv(a,file='abcde.csv')
colnames(a)
mod<-lm(SN...BM...Red.Blood.Cells~age+SN...BM...Pre.Op.INR+SN...BM...Platelets+SURG_PROCEDURE+ResultsBeforeSurgery,data=a)
plot(mod)
g=read.csv("abcde.csv")
g$SN...BM...Pre.Op.INR=as.numeric(g$SN...BM...Pre.Op.INR)
g$SN...BM...Pre.Op.Platelet.Count=as.numeric(g$SN...BM...Pre.Op.Platelet.Count)
g$SN...BM...PRBC.Ordered=as.numeric(g$SN...BM...PRBC.Ordered)
sapply(g,class)
write.csv(g,file='abcde.csv')
summary(g)
g=read.csv("abcde(2).csv")
g=read.csv("abcde (2).csv")
g$SN...BM...Pre.Op.INR=as.numeric(g$SN...BM...Pre.Op.INR)
g$SN...BM...Pre.Op.Platelet.Count=as.numeric(g$SN...BM...Pre.Op.Platelet.Count)
g=read.csv("abcde (2).csv")
g<-as.data.frame(g)
g$SN...BM...Pre.Op.INR=as.numeric(g$SN...BM...Pre.Op.INR)
sapply(g,class)
g[0]
g[1]
g[1:]
colnames(g)
g=read.csv("abcde (2).csv")
colnames(g)
g=read.csv("abcde (2).csv")
g<-as.data.frame(g)
colnames(g)
g$SN...BM...Pre.Op.INR=as.numeric(g$SN...BM...Pre.Op.INR)
g$SN...BM...Pre.Op.Platelet.Count=as.numeric(g$SN...BM...Pre.Op.Platelet.Count)
g$SN...BM...PRBC.Ordered=as.numeric(g$SN...BM...PRBC.Ordered)
sapply(g,class)
write.csv(g,file='abcde.csv',append=TRUE)
g$Allogeneic.Blood.Transfusion<-factor(as.numeric(g$Allogeneic.Blood.Transfusion)-1)
write.csv(g,file='abcde.csv',append=TRUE)
colnames(g)
g[0]
g[1]
head(g[1])
head(g[2])
mod<-lm(SN...BM...Red.Blood.Cells~age)
mod<-lm(SN...BM...Red.Blood.Cells~age,data=g)
plot(mod)
colnames(g)
corrgram(g)
install.packages("corrgram")
corrgram(g)
cor(x,method="pearson")
cor(g,method="pearson")
sapply(g,class)
h=g[ , !(names(g) %in% drops)]
drops <- c("EBL","Allogeneic.Blood.Transfusion","Surgeon.Hash.Name","PATIENT_TYPE","SURGICAL_SPECIALTY","SURG_PROCEDURE","Masked.FIN","Sequence.No.")
h=g[ , !(names(g) %in% drops)]
colnames(h)
sapply(h,class)
cor(h,method="pearsons")
cor(h,method=c("pearsons","kendall","spearman"))
cor(h,method=c("pearsons"))
cor(h,method=c("pearson"))
plot(cor(h,method=c("pearson")))
gh=cor(h,method=c("pearson"))
corrplot(gh)
install.packages("corrplot")
corrplot(gh)
library(corrplot)
corrplot(gh)
gh
?`cor()
;
;
;
;
?cor()
gh=cor(h,method=c("pearson"),use= "na.or.complete")
gh
corrplot(gh)
?corrplot
corrplot(gh,method="color")
corrplot(gh,method="pie")
?corrplot
corrplot(gh,method="shade")
corrplot(gh,method="square")
corrplot(gh,method="circle")
corrplot(gh,method="square")
corrplot(gh,method="shade")
corrplot(gh,method="ellipse")
corrplot(gh,method="circle",order="hclust",type="lower")
corrplot(gh,method="circle",order="hclust",type="upper")
?corrplot
corrplot(gh,method="circle",shade.col = "black",type="upper")
hj=data(mpg)
hj=datasets(mpg)
hj=dataset(mpg)
ggplot(data = g) +
geom_point(mapping = aes(x = age, y = SN...BM...Red.Blood.Cells))
install.packages("ggplot2")
library(ggplot2)
ggplot(data = g) +
geom_point(mapping = aes(x = age, y = SN...BM...Red.Blood.Cells))
?ggplot()
ggplot(data = g) +
geom_point(mapping = aes(x = age, y = SN...BM...Red.Blood.Cells))+
xlim(1,max)
ggplot(data = g) +
geom_point(mapping = aes(x = age, y = SN...BM...Red.Blood.Cells))
ggplot(data = g) +
geom_point(mapping = aes(x = age, y = SN...BM...Red.Blood.Cells))+ ylim(1,max)
ggplot(data = g) +
geom_point(mapping = aes(x = age, y = SN...BM...Red.Blood.Cells))+ ylim(5,100)
colnames(g)
ggplot(data = g) +
geom_point(mapping = aes(x = SURG_PROCEDURE, y = SN...BM...Red.Blood.Cells))+ ylim(5,100)
ggplot(data = g) +
geom_point(mapping = aes(x = SURG_PROCEDURE, y = SN...BM...Red.Blood.Cells))
ggplot(data = g) +
geom_point(mapping = aes(y = SURG_PROCEDURE, x = SN...BM...Red.Blood.Cells))
gh=cor(h,method=c("pearson"),use= "na.or.complete")
corrplot(gh)
library(corrplot)
corrplot(gh)
getwd()
a<-read.csv("Cleaned_Data1.csv")
a<-read.csv("Cleaned_Data1.csv")
a<-read.csv("Cleaned_Data1.csv")
a<-read.csv("Cleaned_Data1.csv")
getwd()
a<-read.csv("Cleaned_Data1.xslx")
a<-read.csv("Cleaned_Data1.csv")
head(a)
colnames(a)
mylist <- split(a,a$SURGICAL_SPECIALTY)
class(mylist)
mylist[[1]
]
class(mylist[[1])
class(mylist[[1]])
length(mylist[])
mylist[[0]]
mylist[[1]]
paste("a"+".csv")
paste("a",".csv")
d<-paste("a",".csv")
d
d<-paste("a",".csv",sep="")
d
d<-paste(toString(1),".csv",sep="")
d
getwd()
setwd("C:/Users/bhave/Documents/testdir")
for i in range(1:length(mylist[]))
for i in range(1:length(mylist[]))
{
d<-paste(toString(i),".csv",sep="")
write.csv(mylist[[i]],file=d)
}
for(i in 1:length(mylist[]))
{
d<-paste(toString(i),".csv",sep="")
write.csv(mylist[[i]],file=d)
}
mylist[[1]
]
mylist[[1]]$SURGICAL_SPECIALTY
mylist[[1]][1]
mylist[[1]]$SURGICAL_SPECIALTY
mylist[[1]]$SURGICAL_SPECIALTY[1]
for(i in 1:length(mylist[]))
{
d<-paste(toString(mylist[[i]]$SURGICAL_SPECIALTY[1]),".csv",sep="")
write.csv(mylist[[i]],file=d)
}
for(i in 1:length(mylist[]))
{
d<-paste(toString(i),".csv",sep="")
write.csv(mylist[[i]],file=d)
}
mylist <- split(a,a$SURG_PROCEDURE)
for(i in 1:length(mylist[]))
{
d<-paste(toString(i),".csv",sep="")
write.csv(mylist[[i]],file=d)
}
length(mylist[])
x<-mylist[[1]]
colnames(x)
for(i in 1:length(mylist[]))
{
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod)
}
for(i in 1:length(mylist[]))
{
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod)
}
for(i in 1:length(mylist[]))
{
x<-mylist[[i]]
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod)
}
for(i in 1:length(mylist[]))
{
x<-mylist[[i]]
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod,id.n=1)
}
for(i in 1:length(mylist[]))
{
print(length(mylist[[i]][1]))
}
for(i in 1:length(mylist[]))
{
print(length(mylist[[i]]))
}
for(i in 1:length(mylist[]))
{
print(length(mylist[[i]][,1]))
}
colnames(a)
a['SN_BM_PRBC_Ordered'][is.na(a['SN_BM_PRBC_Ordered'])]<-0
summary(a)
write.csv(a,file='pr.csv')
write.csv(a,file='pr.csv')
for(i in 1:length(mylist[]))
{
x<-mylist[[i]]
if(mylist[[i]][,1]>1)
{
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod,id.n=1)
}}
for(i in 1:length(mylist[]))
{
print(length(mylist[[i]][,1]))
}
mylist <- split(a,a$SURGICAL_SPECIALTY)
for(i in 1:length(mylist[]))
{
print(length(mylist[[i]][,1]))
}
for(i in 1:length(mylist[]))
{
x<-mylist[[i]]
if(mylist[[i]][,1]>1)
{
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod,id.n=1)
}}
for(i in 1:length(mylist[]))
{
x<-mylist[[i]]
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod,id.n=1)
}
a<-read.csv("pr.csv")
mylist <- split(a,a$SURGICAL_SPECIALTY)
for(i in 1:length(mylist[]))
{
print(length(mylist[[i]][,1]))
}
for(i in 1:length(mylist[]))
{
x<-mylist[[i]]
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod,id.n=1)
}
for(i in 1:length(mylist[]))
{
print(length(mylist[[i]][,1]))
summary(mylist[[i]])
}
for(i in 1:length(mylist[]))
{
#print(length(mylist[[i]][,1]))
print(summary(mylist[[i]]))
}
for(i in 1:length(mylist[]))
{
x<-mylist[[i]]
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod)
}
x<-mylist[[1]]
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod)
summary(x)
setwd("C:/Users/bhave/Documents")
b<-read.csv("Cleaned_Data1.csv")
summary(b)
if(length(mylist[[i]][,1])>100){
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod)}
for(i in 1:length(mylist[]))
{
x<-mylist[[i]]
if(length(mylist[[i]][,1])>100){
mod<-lm(SN_BM_PRBC_Ordered~SN...BM...Pre.Op.INR+SN...BM...Pre.Op.Platelet.Count+age+ResultsBeforeSurgery,data=x)
plot(mod)}
}
b<-read.csv("Surgical_Cases_fm_3.3.csv")
summary(b)
swirl
swirl()
library("swirl", lib.loc="~/R/win-library/3.3")
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="~/R/win-library/3.3")
swirl()
1
swirl()
install.packages("shiny")
load("F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/.RData")
ap<-levels(out[[2]]$County)
class(ap)
ap
shiny::runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
}nrow
nrow(out)
nrow(zipcode)
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
devtools::install_github("shiny", "rstudio")
install.packages("shiny")
shiny::runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
runApp('F:/Scrap/Waterchallenge/Sewer_Overflow_Data_Challenge/SSO_Data_Files/Plots')
